#include "utils.as"

const uint LOCALSTORAGE_VERSION = 2;
const uint LOCALSTORAGE_LENGTH_TYPE = 1;
const uint LOCALSTORAGE_LENGTH_TYPLEN = 1;
const uint LOCALSTORAGE_LENGTH_KEYLEN = 4;
const uint LOCALSTORAGE_LENGTH_VALLEN = 8;

interface serializable
{
	void deserialize(string &in);
	void serialize(string &out);
}

enum localStorage_objTypes
{
	// if you add a more than 10 types, you'll need to edit the load and save methods
	LOCALSTORAGE_TYPE_STRING = 0,
	LOCALSTORAGE_TYPE_INT64  = 1,
	LOCALSTORAGE_TYPE_DOUBLE = 2,
}

class localStorage
{
	private dictionary dict;
	private array<string> keys;
	private dictionary types;
	private string filename;
	private bool loadingFailed;
	private string description;
	private bool _fileExists;

	localStorage(const string &in _filename)
	{
		keys.resize(0);
		filename = _filename;
		description = "";
		loadingFailed = false;
		_fileExists = false;
		if(!load(filename))
		{			
			// Get a new filename of a file that doesn't exist
			string newFilename;
			file f;
			for(uint i=1; i<100000; ++i)
			{
				newFilename = "LOCALSTORAGE_ERROR_"+i+".asdata";
				if(f.open(newFilename, "r")<0)
				{
					f.close();
					break;
				}
				f.close();
			}

			server.log("localStorage exception: Unable to load file '"+filename+"'. File '"+newFilename+"' will be used instead.");
			filename = newFilename;
		}
	}

	localStorage@ opAssign(const localStorage &in other)
	{
		this.dict = other.dict;
		this.keys = other.keys;
		return this;
	}

	void set(const string &in key, const string &in value)
	{
		if(!dict.exists(key))
			keys.insertLast(key);
		dict.set(key, value);
		types.set(key, LOCALSTORAGE_TYPE_STRING);
	}

	bool get(const string &in key, string &out value) const
	{
		return dict.get(key, value);
	}

	void set(const string &in key, const int64 &in value)
	{
		if(!dict.exists(key))
			keys.insertLast(key);
		dict.set(key, value);
		types.set(key, LOCALSTORAGE_TYPE_INT64);
	}

	bool get(const string &in key, int64 &out value) const
	{
		return dict.get(key, value);
	}

	void set(const string &in key, const double &in value)
	{
		if(!dict.exists(key))
			keys.insertLast(key);
		dict.set(key, value);
		types.set(key, LOCALSTORAGE_TYPE_DOUBLE);
	}
	bool get(const string &in key, double &out value) const
	{
		return dict.get(key, value);
	}

	bool exists(const string &in key) const
	{
		return dict.exists(key);
	}

	void delete(const string &in key)
	{
		int index = keys.find(key);
		if(index>=0) keys.removeAt(index);

		dict.delete(key);
		types.delete(key);
	}

	void deleteAll()
	{
		keys.resize(0);
		dict.deleteAll();
		types.deleteAll();
	}

	void setFilename(const string &in _filename)
	{
		filename = _filename;
	}

	string getFilename() const
	{
		return filename;
	}

	bool loadSuccessful()
	{
		return !loadingFailed;
	}

	int getVersion() const
	{
		return LOCALSTORAGE_VERSION;
	}

	void setDescription(const string &in _description)
	{
		description = stringReplace(_description, "\n", "<br>");
	}

	string getDescription()
	{
		return description;
	}

	bool fileExists()
	{
		return _fileExists;
	}

	bool save()
	{
		return save(filename);
	}

	bool save(const string &in _filename)
	{
		file f;

		// Open the file in 'read' mode
		if( f.open(_filename, "w") >= 0 ) 
		{
			f.writeString("LOCALSTORAGE_VERSION="+LOCALSTORAGE_VERSION+"\n");
			f.writeString("DESC="+description+"\n");
			f.writeString("Generated by LocalStorage class. Do NOT edit this file manually!\n");

			int type;
			for(uint i=0; i<keys.length(); i++)
			{
				types.get(keys[i], type);
				f.writeString(formatInt(LOCALSTORAGE_LENGTH_TYPE,"0",LOCALSTORAGE_LENGTH_TYPLEN)+type+formatInt(keys[i].length(),"0",LOCALSTORAGE_LENGTH_KEYLEN)+keys[i]);
				if(type==LOCALSTORAGE_TYPE_STRING)
				{
					string value;
					if(!dict.get(keys[i], value))
						continue;
					f.writeString(formatInt(value.length(),"0",LOCALSTORAGE_LENGTH_VALLEN)+value);
				}
				else if(type==LOCALSTORAGE_TYPE_INT64)
				{
					int64 value;
					if(!dict.get(keys[i], value))
						continue;
					f.writeString(formatInt(20,"0",LOCALSTORAGE_LENGTH_VALLEN)+formatInt(value,"0",20));
				}
				else if(type==LOCALSTORAGE_TYPE_DOUBLE)
				{
					double value;
					if(!dict.get(keys[i], value))
						continue;
					string valueStr = ""+value;
					f.writeString(formatInt(valueStr.length(),"0",LOCALSTORAGE_LENGTH_VALLEN)+valueStr);
				}
				f.writeString("\n");
			}
			f.close();
			return true;
		}
		else
		{
			server.log("Couldn't open file '"+_filename+"' for writing");
			return false;		
		}	
	}

	bool load()
	{
		return load(filename);
	}

	bool load(const string &in _filename)
	{
		loadingFailed = false;
		file f;

		// Open the file in 'read' mode
		if( f.open(_filename, "r") >= 0 ) 
		{
			_fileExists = true;
			string line;
			int len;
			int type;
			string key;
			int index;
			uint lineNumber = 0;
			uint8 zero_ord = ord('0');
			uint8 comment_ord = ord(';');
			string seperator = '!';
			uint8 seperator_ord = ord(seperator);

			// version check
			len = f.readLine(line);
			++lineNumber;
			if(line.substr(0, 21)!='LOCALSTORAGE_VERSION=')
			{
				server.log("localStorage exception: Syntax error on line "+lineNumber+": The LocalStorage version wasn't found on the first line.");
				loadingFailed = true;
				return false;
			}
			if(parseInt(line.substr(21))!=LOCALSTORAGE_VERSION)
			{
				server.log("localStorage exception: The file '"+_filename+"' was generated by a newer LocalStorage version.");
				loadingFailed = true;
				return false;
			}
			
			// Get the user description
			len = f.readLine(line);
			if(line.substr(0, 5)=="DESC=")
			{
				description = stringReplace(line.substr(5), "\n", "");
			}
			else
			{
				server.log("localStorage exception: Syntax error on line "+lineNumber+": The user description wasn't found.");
				loadingFailed = true;
				return false;
			}
			
			// Ignore the next line
			f.readLine(line);

			// Start reading the data
			while(!f.isEndOfFile())
			{
				// get the type
				len = f.readString(LOCALSTORAGE_LENGTH_TYPLEN, line);
				len = f.readString(parseInt(line), line);
				type = parseInt(line);
				
				// get the key
				len = f.readString(LOCALSTORAGE_LENGTH_KEYLEN, line);
				len = f.readString(parseInt(line), line);
				key = line;
				if(key.length()==0)
				{
					if(!f.isEndOfFile())
					{
						server.log("localStorage exception: Syntax error: An empty key was read.");
						loadingFailed = true;
					}
					break;
				}
				
				// get the value
				len = f.readString(LOCALSTORAGE_LENGTH_VALLEN, line);
				len = f.readString(parseInt(line), line);
	
				switch(type)
				{
					case LOCALSTORAGE_TYPE_STRING:
						set(key, line);
						break;
					case LOCALSTORAGE_TYPE_INT64:
						set(key, parseInt(line));
						break;
					case LOCALSTORAGE_TYPE_DOUBLE:
						set(key, parseFloat(line));
						break;
					default:
						server.log("localStorage exception: Type "+type+" does not exist.");
				}
				
				// Read the new line character
				f.readLine(line);
			}
			f.close();
			return !loadingFailed;
		}
		else
		{
			_fileExists = false;
			return !loadingFailed;
		}
	}

}
